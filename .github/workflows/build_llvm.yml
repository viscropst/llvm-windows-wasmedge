name: build_llvm

on:
  workflow_dispatch:
    inputs:
      hostArch:
        description: 'Arch of build host'
        required: false
        default: x64
        type: choice
        options:
          - x86
          - x64
      targetArch:
        description: 'Arch of target to build'
        required: true
        default: x64
        type: choice
        options:
          - x86
          - x64
      llvmTargets:
        description: "llvm targets to build (use ';' to split)"
        type: string
        default: X86
        required: false
      llvmVer:
        description: llvm version to build
        type: string
        default: none
        required: false
      winsdkVer:
        description: windows sdk for building
        type: string
        default: none
        required: false

  workflow_call:
    inputs:
      modifier:
       description: the modifier to stats initial calling
       type: string
       default: none
       required: true
      host-arch:
        description: the host arch to build
        type: string
        default: x64
        required: false
      target-arch:
        description: the target arch to build
        type: string
        default: x64
        required: true
      llvm-targets:
        description: llvm targets to build (use ';' to split)
        type: string
        default: X86
        required: false
      llvm-ver:
        description: llvm version to build
        type: string
        default: none
        required: false
      winsdk-ver:
        description: windows sdk for building
        type: string
        default: none
        required: false
  
jobs:
  build_prepare:
    name: Prepareing before build
    runs-on: ubuntu-latest
    env:
      modifier: none
      target_arch: x64
      host_arch: x64
      llvm_targets: X86
      llvm_ver: none
      winsdk_ver: none
    outputs:
      modifier: ${{steps.value_sets.outputs.modifier}}
      target_arch: ${{steps.value_sets.outputs.target_arch}}
      host_arch: ${{steps.value_sets.outputs.host_arch}}
      llvm_targets: ${{steps.value_sets.outputs.llvm_targets}}
      llvm_ver: ${{steps.value_sets.outputs.llvm_ver}}
      winsdk_ver: ${{steps.value_sets.outputs.winsdk_ver}}
      winsdk_build_ver: ${{steps.value_sets.outputs.winsdk_build_ver}}

    steps:
      - name: Processing workflow call with modifier
        if: ${{ inputs.modifier != 'none' }}
        run: |
          echo ::group::workflow_call with modifier param preparing
          echo "modifier=call_${{ inputs.modifier }}" >> $GITHUB_ENV
          echo "target_arch=${{ inputs.target-arch }}" >> $GITHUB_ENV
          echo "host_arch=${{ inputs.host-arch }}" >> $GITHUB_ENV
          echo "llvm_targets=${{ inputs.llvm-targets }}" >> $GITHUB_ENV
          echo "llvm_ver=${{ inputs.llvm-ver }}" >> $GITHUB_ENV
          echo "winsdk_ver=${{ inputs.winsdk-ver }}" >> $GITHUB_ENV
          echo ::endgroup::
      
      - name: Processing workflow call
        if: ${{ github.event_name == 'workflow_call' }}
        run: |
          echo ::group::workflow_call param preparing
          echo "modifier=workflow_call" >> $GITHUB_ENV
          echo "target_arch=${{ inputs.target-arch }}" >> $GITHUB_ENV
          echo "host_arch=${{ inputs.host-arch }}" >> $GITHUB_ENV
          echo "llvm_targets=${{ inputs.llvm-targets }}" >> $GITHUB_ENV
          echo "llvm_ver=${{ inputs.llvm-ver }}" >> $GITHUB_ENV
          echo "winsdk_ver=${{ inputs.winsdk-ver }}" >> $GITHUB_ENV
          echo ::endgroup::

      - name: Processing workflow dispatch
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo ::group::workflow_dispatch param preparing
          echo "modifier=workflow_dispatch" >> $GITHUB_ENV
          echo "target_arch=${{ github.event.inputs.targetArch }}" >> $GITHUB_ENV
          echo "host_arch=${{ github.event.inputs.hostArch }}" >> $GITHUB_ENV
          echo "llvm_targets=${{ github.event.inputs.llvmTargets }}" >> $GITHUB_ENV                                   
          echo "llvm_ver=${{ github.event.inputs.llvmVer }}" >> $GITHUB_ENV   
          echo "winsdk_ver=${{ github.event.inputs.winsdkVer }}" >> $GITHUB_ENV
          echo ::endgroup::
      
      - name: Check if has modifier llvm version
        if: ${{ env.llvm_ver == 'none' }}
        run: |
          echo "llvm_ver=13.0.0" >> $GITHUB_ENV
      - name: Check if has modified windows sdk version
        if: ${{ env.winsdk_ver == 'none' }}
        run: |
          echo "winsdk_ver=10.0.19041.0" >> $GITHUB_ENV

      - name: Setting Output
        id: value_sets
        run: |
          echo ::group::workflow_dispatch param preparing
          echo ::set-output name=modifier::${{ env.modifier }}
          echo ::set-output name=target_arch::${{ env.target_arch }}
          echo ::set-output name=host_arch::${{ env.host_arch }}
          echo ::set-output name=llvm_targets::${{ env.llvm_targets }}                                   
          echo ::set-output name=llvm_ver::${{ env.llvm_ver }}
          echo ::set-output name=winsdk_ver::${{ env.winsdk_ver }}
          winsdk_ver=${{ env.winsdk_ver }}
          readarray -d . -t winsdk_verarr <<< "$winsdk_ver"
          echo ::set-output name=winsdk_build_ver::${winsdk_verarr[2]}
          echo ::endgroup::

      - name: Showing Environment
        run: |
          echo ${{github.event_name}}
          cat ${{github.env}}
      
      - name: Check if None of modifier
        if: ${{ env.modifier == 'none' }}
        run: |
          echo cannot build with none of modifier
          exit 1 

  build:
    name: Build llvm on Windows with Clang
    needs:
      - build_prepare
    runs-on: windows-latest
    env:
      modifier: ${{needs.build_prepare.outputs.modifier}}
      target_arch: ${{needs.build_prepare.outputs.target_arch}}
      host_arch: ${{needs.build_prepare.outputs.host_arch}}
      llvm_targets: ${{needs.build_prepare.outputs.llvm_targets}}
      llvm_ver: ${{needs.build_prepare.outputs.llvm_ver}}
      winsdk_ver: ${{needs.build_prepare.outputs.winsdk_ver}}
      winsdk_buildver: ${{needs.build_prepare.outputs.winsdk_build_ver}}
    steps:
      - name: Install dependency
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install cmake ninja vswhere

      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
        with:
          sdk-version: ${{env.winsdk_buildver}}

      # replaces git clone with actions/checkout
      # arg of command:
      # --branch llvmorg-13.0.0 --depth 1 https://github.com/llvm/llvm-project.git
      - uses: actions/checkout@v2
        with:
          repository: 'llvm/llvm-project'
          ref: 'llvmorg-${{env.llvm_ver}}'
          fetch-depth: '1'

      - name: Build llvm clang+lld
        run: |
          $vsPath = (vswhere -latest -property installationPath)
          Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=${{env.target_arch}} -host_arch=${{env.host_arch}} -winsdk=${{env.winsdk_ver}}"
          
          echo "::group::configure by cmake (modified by ${{env.modifier}})"
          $Env:CC = "clang-cl"
          $Env:CXX = "clang-cl"
          cmake -Bbuild-clang+lld -GNinja `
          -DCMAKE_SYSTEM_VERSION="${{env.winsdk_ver}}" `
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL `
          -DCMAKE_BUILD_TYPE=Release `
          -DCPACK_GENERATOR=ZIP `
          -DCPACK_PACKAGE_NAME="llvm.clang+lld.${{env.target_arch}}" `
          -DLLVM_USE_CRT_RELEASE=MT `
          -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON `
          "-DCMAKE_INSTALL_PREFIX=$pwd\\prefix" `
          -DLLVM_TARGETS_TO_BUILD="${{env.llvm_targets}}" `
          -DLLVM_ENABLE_PROJECTS="clang;lld;clang-extra" llvm
          echo "::endgroup::"
          
          echo "::group::building clang"
          cmake --build build-clang+lld --clean-first -- -j 16
          echo "::endgroup::"

      - name: Build llvm lld
        run: |
          $vsPath = (vswhere -latest -property installationPath)
          Import-Module (Join-Path $vsPath "Common7\Tools\Microsoft.VisualStudio.DevShell.dll")
          Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation -DevCmdArguments "-arch=${{env.target_arch}} -host_arch=${{env.host_arch}} -winsdk=${{env.winsdk_ver}}"
          
          echo "::group::configure by cmake"
          $Env:CC = "clang-cl"
          $Env:CXX = "clang-cl"
          cmake -Bbuild-lld -GNinja `
          -DCMAKE_SYSTEM_VERSION="${{env.winsdk_ver}}" `
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreadedDLL `
          -DCMAKE_BUILD_TYPE=Release `
          -DCPACK_GENERATOR=ZIP `
          -DCPACK_PACKAGE_NAME="llvm.lld.${{env.target_arch}}" `
          -DLLVM_USE_CRT_RELEASE=MT `
          -DLLVM_INSTALL_TOOLCHAIN_ONLY=ON `
          "-DCMAKE_INSTALL_PREFIX=$pwd\\prefix" `
          -DLLVM_TARGETS_TO_BUILD="${{env.llvm_targets}}" `
          -DLLVM_ENABLE_PROJECTS="lld;clang-extra" llvm
          echo "::endgroup::"
          
          echo "::group::building lld"
          cmake --build build-lld --clean-first -- -j 16
          echo "::endgroup::"

      - name: Package llvm
        run: |
          cmake --build build-clang+lld --target package
          cmake --build build-lld --target package

      - name: Content list
        run: |
          echo "::group::clang+lld"
          ls ./build-clang+lld
          echo "::endgroup::"

          echo "::group::lld"
          ls ./build-lld
          echo "::endgroup::"

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: llvm
          path: |
            build-clang+lld/llvm.clang+lld.*.zip
            build-lld/llvm.lld*.zip
          retention-days: 5
